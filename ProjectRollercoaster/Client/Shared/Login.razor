@inject ILocalStorageService LocalStorage;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IAuthService AuthService
@inject IToastService ToastService


<div class="loginForm">
    <br />
    <div>
Please log in below or <a href="register">register</a> for a new account.
</div>
<br />
<ErrorBoundary>
<EditForm style="width: 25em;" Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
    </div>
    <br />
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-outline-primary">Login</button>
    <ValidationSummary></ValidationSummary>
</EditForm>
</ErrorBoundary>
</div>



@code {
    private UserLogin user = new UserLogin();

    private async void HandleLogin()
    {
        var result = await AuthService.Login(user);
        if(result.Success)
        {
            await LocalStorage.SetItemAsync<string>("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
        }
        else
        {
            ToastService.ShowError(result.Message);
        }
    }
}
