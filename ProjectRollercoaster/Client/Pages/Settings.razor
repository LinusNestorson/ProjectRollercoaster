@page "/settings"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IUserService UserService
@attribute [Authorize]

<h3>Settings</h3>

<section class="settingsContainer">

    <br />
    <div>
        Please enter your username below in order to delete your profile.
    </div>
    <br />

    <EditForm style="width: 25em;" Model="user" OnValidSubmit="HandleUserDelete">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        </div>
        <br />
        <button type="submit" class="btn btn-outline-primary">Delete</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
    <br />
    <div class="errorContainer">
        @if (string.IsNullOrWhiteSpace(errorMessage) == false)
        {
            <div class="alert alert-danger" role="alert">
                <h3>@errorMessage</h3>
            </div>
        }
    </div>



</section>

@code {

    private UserDelete user = new UserDelete();

    string errorMessage = string.Empty;

    private async void HandleUserDelete()
    {
        var result = await UserService.RemoveUser();
        if (result)
        {
            await LocalStorage.RemoveItemAsync("authToken");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "failed to remove user";
        }
    }

}
