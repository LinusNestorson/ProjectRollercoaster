@page "/"
@inject IFeedService FeedService
@inject IPodcastService PodcastService
@inject IFeedContentService FeedContentService
@attribute [Authorize]

@*The index page that displays feeds from all sources subscribed to with latest order on top*@

<PageTitle>Index</PageTitle>

    @if (spinner == true)
{
        <div style="position:absolute; top:30vh; width:auto; text-align:center; margin-left: 35vw">
            <i style="color: orange; font-size: 4em;" class="fas fa-spin fa-rss-square"></i> <br /> <br /> <p style="font-size: 2.5em;">Fetching Feeds...</p>
        </div>
}

@if (spinner == false)
{
    <h1 class=indexHeader>Todays news</h1>
    <div class="articleGrid">
        @foreach (var feed in FeedContentService.AllFeedsBasedOnPublish)
        {
            <div class="indexArticle">
                <div class="indexArticleContent">
                    <div class="headLine">
                        <section class="imgAndName"> <div class="headerImg"> <i font-weight="bold" style="color: #112d44" class=@feed.Image> </i></div><div class="headerName"><h4> @feed.Name </h4> </div></section>
                        <p style="font-weight: bolder; font-size:1rem;">@feed.Title</p>
                    </div>
                    <p>@feed.Summary</p>
                    <p>@feed.PublishDate</p>
                    @foreach (var link in feed.Links)
                    {
                        <a href=@link target="_blank">@link</a>
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    /// <summary>
    /// Determines if loading spinner should be shown or not
    /// </summary>
    private bool spinner = false;

    /// <summary>
    /// Method that runs first when the component is ready to start.
    /// Calls on methods inside services and while these are loading displaying a spinner.
    /// </summary>
    /// <returns>Task representing async operation</returns>
    protected override async Task OnInitializedAsync()
    {
        spinner = true;
        await Task.Delay(1);
        await FeedService.LoadAllFeeds();
        await PodcastService.LoadAllPodcasts();
        await FeedContentService.GetFeedContent();
        spinner = false;
        await Task.Delay(1000);
    }
}
