@page "/podcasts"
@inject IPodcastService PodcastService
@attribute [Authorize]

@*Page that gives user option to add new feeds or to remove feeds already stored*@
<PageTitle>Podcasts</PageTitle>

<div class="feedPage">

    <section>
        <h1>Manage your podcasts</h1>
        <br />

        <EditForm Model="podcast" OnValidSubmit="AddRss">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class=addPodcastContainer>
                <div class="rssInputFirst">
                    <label for="rssLinkAdd" class="required"></label>
                    <InputText id="rssLinkAdd" @bind-Value="podcast.Url" placeholder="Paste URL of Spotify Podcast" class="form-control col-md-6">Link</InputText>
                    <ValidationMessage For="@(() => podcast.Url)" />
                </div>
                <div class="rssInputSecond">
                    <label for="rssNameAdd" class="required"></label>
                    <InputText id="rssNameAdd" @bind-Value="podcast.Name" placeholder="Name The Podcast" class="form-control col-md-6"></InputText>
                    <ValidationMessage For="@(() => podcast.Name)" />
                </div>
                <div class="addBtn">
                    <button type="submit" class="btn btn-primary">Add feed</button>
                </div>
                <div class="imgChoice">
                    <button type="button" id=imgBox @onclick="@(() => SetImage("fas fa-futbol"))"><i class="fas fa-futbol"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("far fa-newspaper"))"><i class="far fa-newspaper"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("fas fa-laptop-code"))"><i class="fas fa-laptop-code"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("far fa-money-bill-alt"))"><i class="far fa-money-bill-alt"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("fas fa-landmark"))"><i class="fas fa-landmark"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("fas fa-paw"))"><i class="fas fa-paw"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("far fa-bell"))"><i class="far fa-bell"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("fas fa-car-side"))"><i class="fas fa-car-side"></i></button>
                    <button type="button" id=imgBox @onclick="@(() => SetImage("fas fa-shopping-cart"))"><i class="fas fa-shopping-cart"></i></button>
                </div>
            </div>
        </EditForm>

        <div class=removePodcastContainer>

            <ul>
                @foreach (var item in PodcastService.Podcasts)
                {
                    <li class="removeRow">
                        <div class="linkText"><div style="font-weight: bold;"><i class=@item.Image></i> @item.Name </div>@item.Url</div> <button class="btn btn-danger" id="removeButton" @onclick="() => RemoveRss(item.Id)">Remove</button>
                    </li>
                    <br />
                }
            </ul>
        </div>
    </section>

</div>


@code {
    //public bool showModal = false;

    /// <summary>
    /// Creates a new object of Feed type.
    /// </summary>
    Podcast podcast = new();

    /// <summary>
    /// Sets the image chosen by user from template of pre defined pictures on page.
    /// </summary>
    /// <param name="image">string corresponding to a font awesome image</param>
    public void SetImage(string image)
    {
        podcast.Image = image;
    }

    /// <summary>
    /// Adding feed to the profile of current user and reload feeds after finished.
    /// Gives exception if user is entering invalid URL.
    /// </summary>
    /// <returns>Task representing async operation</returns>
    /// <exception cref="Exception">Throws exception inheritdoc text that tells that URL is invalid</exception>
    private async Task AddRss()
    {
        MakeFirstLetterUpperCase();

        var failOrSuccess = await PodcastService.AddPodcast(podcast);

        if (!failOrSuccess)
        {
            throw new Exception("invalid rss feed");
        }
        await ReloadPodcasts();
    }

    /// <summary>
    /// Converts first letter to uppercase if first letter is in lower letter from user input. 
    /// </summary>
    private void MakeFirstLetterUpperCase()
    {

        podcast.Name = char.ToUpper(podcast.Name[0]) + podcast.Name.Substring(1);
    }

    /// <summary>
    /// Method passing the input from user to method in FeedService.
    /// Reloads feeds with updated feed list after method is completed.
    /// </summary>
    /// <param name="id"></param>
    private async void RemoveRss(int id)
    {
        PodcastService.RemovePodcast(id);
        await ReloadPodcasts();
    }

    /// <summary>
    /// Method that runs first when the component is ready to start.
    /// Awaits method in FeedService that loads feeds into services.
    /// </summary>
    /// <returns>Task representing async operation</returns>
    protected override async Task OnInitializedAsync()
    {
        await PodcastService.LoadAllPodcasts();
    }

    /// <summary>
    /// Reload feeds when feed is added or removed.
    /// Rerenders component when finished.
    /// </summary>
    /// <returns>Task representing async operation</returns>
    private async Task ReloadPodcasts()
    {
        await PodcastService.LoadAllPodcasts();
        StateHasChanged();
    }

}
